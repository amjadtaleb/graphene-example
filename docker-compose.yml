x-default-logging: &logging
  driver: "json-file"
  options:
    max-size: "5m"
    max-file: "2"
    tag: "{{.Name}}"

volumes:
  pg-data:
  # grafana-data:


networks:
  wasmer-net:
    driver: bridge

services:
  db:
    image: pgvector/pgvector:pg17
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-wasmer_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-wasmer_password}
      POSTGRES_DB: ${POSTGRES_DB:-wasmer_db}
    ports:
      - "5439:5432"
    volumes:
      - pg-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${POSTGRES_USER:-wasmer_user}", "-d", "${POSTGRES_DB:-wasmer_db}" ]
      start_period: 1s
      interval: 1s
      timeout: 2s
      retries: 5
    networks:
      - wasmer-net

  backend:
    build: .
    working_dir: /app/src
    container_name: wasmer_backend
    environment:
      DJANGO_SETTINGS_MODULE: config.settings.local
      ENVIRONMENT: local
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      LOG_LEVEL: info
    volumes:
      - ./src:/app/src
      - ./staticfiles:/app/src/staticfiles
      - ./config.toml:/app/config.toml
      - ./compose/kolo-config.toml:/app/src/.kolo/config.toml
    depends_on:
      db:
        condition: service_healthy
      otel-collector:
        condition: service_started
    ports:
      - "8009:8000"
    post_start:
      - command: ./manage.py collectstatic --noinput --skip-checks
      - command: ./manage.py migrate --skip-checks
      - command: ./manage.py populate_db
    networks:
      - wasmer-net
    develop:
      watch:
        - action: rebuild
          path: pyproject.toml

  frontend:
    image: nginx:latest
    container_name: wasmer_frontend
    ports:
      - "8080:80"
    volumes:
      - ./compose/nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./staticfiles:/app/staticfiles
    depends_on:
      backend:
        condition: service_started
    develop:
      watch:
        - action: restart
          path: ./staticfiles
    networks:
      - wasmer-net

  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: wasmer_otel_collector
    command: [ "--config=/etc/otelcol-config.yml" ]
    user: 0:0
    volumes:
      - ./compose/otel-collector/collector.yml:/etc/otelcol-config.yml
    ports:
      - "4317:4317" # OTLP gRPC
      - "4318:4318" # OTLP HTTP
      - "8889:8889" # Prometheus
    networks:
      - wasmer-net
    depends_on:
      jaeger:
        condition: service_started
    logging: *logging

  jaeger:
    # TODO: update to latest
    # https://github.com/jaegertracing/jaeger/blob/v2.7.0/docker-compose/jaeger-docker-compose.yml
    image: jaegertracing/jaeger:latest
    container_name: wasmer_jaeger
    ports:
      - "16689:16686" # Jaeger UI #### Not the standard
      - "5775:5775/udp" # UDP     agent         accept zipkin.thrift over compact thrift protocol
      - "6831:6831/udp" # UDP     agent         accept jaeger.thrift over compact thrift protocol
      - "6832:6832/udp" # UDP     agent         accept jaeger.thrift over binary thrift protocol
      - "5778:5778" # HTTP    agent         serve configs
      - "14268:14268" # HTTP    collector     accept jaeger.thrift directly from clients
      - "9411:9411" # HTTP    collector     Zipkin compatible endpoint
    networks:
      - wasmer-net

  prometheus:
    image: prom/prometheus:latest
    container_name: wasmer_prometheus
    # command: [ "--config.file=/etc/prometheus/prometheus.yml" ]
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --web.console.templates=/etc/prometheus/consoles
      - --web.console.libraries=/etc/prometheus/console_libraries
      - --storage.tsdb.path=/prometheus
      - --storage.tsdb.retention.time=1h
      - --storage.tsdb.wal-compression
      - --storage.tsdb.retention.size=1GB
      - --storage.tsdb.min-block-duration=2h
      - --storage.tsdb.max-block-duration=2h
      - --web.route-prefix=/
      - --web.enable-lifecycle
      - --web.enable-otlp-receiver
      - --enable-feature=exemplar-storage
    volumes:
      - ./compose/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9099:9090"
    networks:
      - wasmer-net
    logging: *logging

  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: wasmer_grafana
  #   ports:
  #     - "3009:3000"
  #   volumes:
  #     - ./compose/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
  #     - ./compose/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
  #     - grafana-data:/var/lib/grafana
  #   networks:
  #     - wasmer-net
  #   depends_on:
  #     - prometheus
  #   environment:
  #     GF_SECURITY_ADMIN_PASSWORD: admin
  #     GF_USERS_ALLOW_SIGN_UP: false
  #     GF_SERVER_DOMAIN: localhost
  #   restart: unless-stopped
  #   logging: *logging
